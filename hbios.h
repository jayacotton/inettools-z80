//******************************************************************************
//
//! \file hbios.h 
//! \brief hbios entry and function definition file.
//!
//! \version 2.9.1-pre.12
//! \date 5/9/2019
//! \par Revision history
//!	5/9/2019  Ported from hbios.inc to hbios.h from the RomWBW code tree.
//!
//! \author Wayne Warthen, Jay Cotton 
//! \copyright
//!
//! Copyright (c)  2018-2019, Wayne Warthen.
//! All rights reserved.
//!
//! Redistribution and use in source and binary forms, with or without
//! modification, are permitted provided that the following conditions
//! are met:
//!
//!     * Redistributions of source code must retain the above copyright
//! notice, this list of conditions and the following disclaimer.
//!     * Redistributions in binary form must reproduce the above copyright
//! notice, this list of conditions and the following disclaimer in the
//! documentation and/or other materials provided with the distribution.
//!     * Neither the name of the <ORGANIZATION> nor the names of its
//! contributors may be used to endorse or promote products derived
//! from this software without specific prior written permission.
//!
//! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
//! AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//! IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//! ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
//! LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//! CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//! SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//! INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
//! CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
//! ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
//! THE POSSIBILITY OF SUCH DAMAGE.
//
//*****************************************************************************

//
// HBIOS FUNCTIONS
//
#define BF_CIO			$00
#define BF_CIOIN		BF_CIO + 0	// CHARACTER INPUT
#define BF_CIOOUT		BF_CIO + 1	// CHARACTER OUTPUT
#define BF_CIOIST		BF_CIO + 2	// CHARACTER INPUT STATUS
#define BF_CIOOST		BF_CIO + 3	// CHARACTER OUTPUT STATUS
#define BF_CIOINIT		BF_CIO + 4	// INIT/RESET DEVICE/LINE CONFIG
#define BF_CIOQUERY		BF_CIO + 5	// REPORT DEVICE/LINE CONFIG
#define BF_CIODEVICE		BF_CIO + 6	// REPORT DEVICE INFO
//
#define BF_DIO			$10
#define BF_DIOSTATUS		BF_DIO + 0	// DISK STATUS
#define BF_DIORESET		BF_DIO + 1	// DISK RESET
#define BF_DIOSEEK		BF_DIO + 2	// DISK SEEK
#define BF_DIOREAD		BF_DIO + 3	// DISK READ SECTORS
#define BF_DIOWRITE		BF_DIO + 4	// DISK WRITE SECTORS
#define BF_DIOVERIFY		BF_DIO + 5	// DISK VERIFY SECTORS
#define BF_DIOFORMAT		BF_DIO + 6	// DISK FORMAT TRACK
#define BF_DIODEVICE		BF_DIO + 7	// DISK DEVICE INFO REPORT
#define BF_DIOMEDIA		BF_DIO + 8	// DISK MEDIA REPORT
#define BF_DIODEFMED		BF_DIO + 9	// DEFINE DISK MEDIA
#define BF_DIOCAP		BF_DIO + 10	// DISK CAPACITY REPORT
#define BF_DIOGEOM		BF_DIO + 11	// DISK GEOMETRY REPORT
//
#define BF_RTC			$20
#define BF_RTCGETTIM		BF_RTC + 0	// GET TIME
#define BF_RTCSETTIM		BF_RTC + 1	// SET TIME
#define BF_RTCGETBYT		BF_RTC + 2	// GET NVRAM BYTE BY INDEX
#define BF_RTCSETBYT		BF_RTC + 3	// SET NVRAM BYTE BY INDEX
#define BF_RTCGETBLK		BF_RTC + 4	// GET NVRAM DATA BLOCK
#define BF_RTCSETBLK		BF_RTC + 5	// SET NVRAM DATA BLOCK
//
#define BF_EMU			$30		// DEPRECATED
//
#define BF_VDA			$40
#define BF_VDAINI		BF_VDA + 0	// INITIALIZE VDU
#define BF_VDAQRY		BF_VDA + 1	// QUERY VDU STATUS
#define BF_VDARES		BF_VDA + 2	// SOFT RESET VDU
#define BF_VDADEV		BF_VDA + 3	// DEVICE INFO
#define BF_VDASCS		BF_VDA + 4	// SET CURSOR STYLE
#define BF_VDASCP		BF_VDA + 5	// SET CURSOR POSITION
#define BF_VDASAT		BF_VDA + 6	// SET CHARACTER ATTRIBUTE
#define BF_VDASCO		BF_VDA + 7	// SET CHARACTER COLOR
#define BF_VDAWRC		BF_VDA + 8	// WRITE CHARACTER
#define BF_VDAFIL		BF_VDA + 9	// FILL
#define BF_VDACPY		BF_VDA + 10	// COPY
#define BF_VDASCR		BF_VDA + 11	// SCROLL
#define BF_VDAKST		BF_VDA + 12	// GET KEYBOARD STATUS
#define BF_VDAKFL		BF_VDA + 13	// FLUSH KEYBOARD BUFFER
#define BF_VDAKRD		BF_VDA + 14	// READ KEYBOARD
//
#define BF_SYS			$F0
#define BF_SYSRESET		BF_SYS + 0	// SOFT RESET HBIOS
#define BF_SYSVER		BF_SYS + 1	// GET HBIOS VERSION
#define BF_SYSSETBNK		BF_SYS + 2	// SET CURRENT BANK
#define BF_SYSGETBNK		BF_SYS + 3	// GET CURRENT BANK
#define BF_SYSSETCPY		BF_SYS + 4	// BANK MEMORY COPY SETUP
#define BF_SYSBNKCPY		BF_SYS + 5	// BANK MEMORY COPY
#define BF_SYSALLOC		BF_SYS + 6	// ALLOC HBIOS HEAP MEMORY
#define BF_SYSFREE		BF_SYS + 7	// FREE HBIOS HEAP MEMORY
#define BF_SYSGET		BF_SYS + 8	// GET HBIOS INFO
#define BF_SYSSET		BF_SYS + 9	// SET HBIOS PARAMETERS
#define BF_SYSPEEK		BF_SYS + 10	// GET A BYTE VALUE FROM ALT BANK
#define BF_SYSPOKE		BF_SYS + 11	// SET A BYTE VALUE IN ALT BANK
#define BF_SYSINT		BF_SYS + 12	// MANAGE INTERRUPT VECTORS
//
#define BF_SYSGET_CIOCNT		$00	// GET CHAR UNIT COUNT
#define BF_SYSGET_DIOCNT		$10	// GET DISK UNIT COUNT
#define BF_SYSGET_VDACNT		$40	// GET VDA UNIT COUNT
#define BF_SYSGET_TIMER			$D0	// GET CURRENT TIMER VALUE
#define BF_SYSGET_BOOTINFO		$E0	// GET BOOT INFORMATION
#define BF_SYSGET_CPUINFO		$F0	// GET CPU INFORMATION
#define BF_SYSGET_MEMINFO		$F1	// GET MEMORY CAPACTITY INFO
#define BF_SYSGET_BNKINFO		$F2	// GET BANK ASSIGNMENT INFO
//
#define BF_SYSSET_TIMER			$D0	// SET TIMER VALUE
#define BF_SYSSET_BOOTINFO		$E0	// SET BOOT INFORMATION
//
#define BF_SYSINT_INFO			$00	// GET INTERRUPT SYSTEM INFO
#define BF_SYSINT_GET			$10	// GET INT VECTOR ADDRESS
#define BF_SYSINT_SET			$20	// SET INT VECTOR ADDRESS
//
// CHAR DEVICE IDS
//
#define CIODEV_UART		$00
#define CIODEV_ASCI		$10
#define CIODEV_TERM		$20
#define CIODEV_PRPCON		$30
#define CIODEV_PPPCON		$40
#define CIODEV_SIO		$50
#define CIODEV_ACIA		$60
#define CIODEV_CONSOLE		$D0
#define CIODEV_PIO		$70
//
// SUB TYPES OF CHAR DEVICES
//
//00 RS-232
//01 TERMINAL
//02 PARALLEL PORT
//03 UNUSED
//
// DISK DEVICE IDS
//
#define DIODEV_MD		$00
#define DIODEV_FD		$10
#define DIODEV_RF		$20
#define DIODEV_IDE		$30
#define DIODEV_ATAPI		$40
#define DIODEV_PPIDE		$50
#define DIODEV_SD		$60
#define DIODEV_PRPSD		$70
#define DIODEV_PPPSD		$80
#define DIODEV_HDSK		$90
//
// VIDEO DEVICE IDS
//
#define VDADEV_VDU		$00		// ECB VDU - MOTOROLA 6545
#define VDADEV_CVDU		$10		// ECB COLOR VDU - MOS 8563
#define VDADEV_NEC		$20		// ECB UPD7220 - NEC UPD7220
#define VDADEV_TMS		$30		// N8 ONBOARD VDA SUBSYSTEM - TMS 9918
#define VDADEV_VGA		$40		// VGA
//
// EMULATION TYPES
//
#define EMUTYP_NONE		0		// NONE
#define EMUTYP_TTY		1		// TTY
#define EMUTYP_ANSI		2		// ANSI
//	
// HBIOS CONTROL BLOCK OFFSETS
// WARNING: THESE OFFSETS WILL CHANGE SIGNIFICANTLY BETWEEN RELEASES
//          IT IS STRONGLY RECOMMENDED THAT YOU DO NOT USE THEM!
//
#define HCB_LOC			$100		// LOCATION OF HCB IN HBIOS BANK
#define HCB_SIZ			$100		// SIZE OF HCB DATA BLOCK
//
#define HCB_MARKER		$03		// MARKER ('W',~'W') (WORD)
#define HCB_VERSION		$05		// HBIOS VERSION NUM
#define HCB_PLATFORM		$07		// PLATFORM ID
#define HCB_CPUMHZ		$08		// CPU SPEED IN MHZ (BYTE)
#define HCB_CPUKHZ		$09		// CPU SPEED IN KHZ (WORD)
#define HCB_RAMBANKS		$0B		// TOTAL SIZE OF RAM IN 32K BANKS (BYTE)
#define HCB_ROMBANKS		$0C		// TOTAL SIZE OF ROM IN 32K BANKS (BYTE)
#define HCB_BOOTVOL		$0D		// BOOT VOLUME, MSB=DEV/UNIT, LSB=LU (WORD)
#define HCB_BOOTBID		$0F		// BANK ID OF ROM PAGE BOOTED (BYTE)
#define HCB_SERDEV		$10		// PRIMARY SERIAL DEVICE/UNIT (BYTE)
#define HCB_CRTDEV		$11		// CRT DISPLAY DEVICE/UNIT (BYTE)
#define HCB_CONDEV		$12		// ACTIVE CONSOLE DEVICE/UNIT (BYTE)
//HCB_CUREMU		$13		// CURRENT VDA TERMINAL EMULATION (DEPRECATED)
//HCB_CURVDA		$14		// CURRENT VDA TARGET FOR EMULATION (DEPRECATED)
//
#define HCB_HEAP		$20		// DWORD ADDRESS OF START OF HEAP
#define HCB_HEAPTOP		$22		// DWORD ADDRESS OF TOP OF HEAP
//
// MEMORY BANK IDS (ONE BYTE EACH)
#define HCB_BIDCOM		$D8		// COMMON BANK (UPPER 32K)
#define HCB_BIDUSR		$D9		// USER BANK (TPA)
#define HCB_BIDBIOS		$DA		// BIOS BANK (HBIOS, UBIOS)
#define HCB_BIDAUX		$DB		// AUX BANK (BPBIOS)
#define HCB_BIDRAMD0		$DC		// FIRST BANK OF RAM DRIVE
#define HCB_BIDRAMDN		$DD		// LAST BANK OF RAM DRIVE
#define HCB_BIDROMD0		$DE		// FIRST BANK OF ROM DRIVE
#define HCB_BIDROMDN		$DF		// LAST BANK OF ROM DRIVE
//
// HBIOS PROXY COMMON DATA BLOCK
// EXACTLY 32 BYTES AT $FFE0-$FFFF
//
#define HBX_XFC			$10000 - $20		// HBIOS PROXY INTERFACE AREA, 32 BYTES FIXED
//
#define HBX_XFCDAT		HBX_XFC			// DATA PORTION OF HBIOS PROXY INTERFACE AREA
#define HB_CURBNK		HBX_XFCDAT + 0		// CURRENTLY ACTIVE LOW MEMORY BANK ID
#define HB_INVBNK		HBX_XFCDAT + 1		// BANK ACTIVE AT TIME OF HBIOS CALL INVOCATION
#define HB_SRCADR		HBX_XFCDAT + 2		// BNKCPY: DESTINATION BANK ID
#define HB_SRCBNK		HBX_XFCDAT + 4		// BNKCPY: SOURCE BANK ID
#define HB_DSTADR		HBX_XFCDAT + 5		// BNKCPY: DESTINATION ADDRESS
#define HB_DSTBNK		HBX_XFCDAT + 7		// BNKCPY: SOURCE ADDRESS
#define HB_CPYLEN		HBX_XFCDAT + 8		// BNKCPY: COPY LENGTH
//
#define HBX_XFCFNS		HBX_XFC + $10		// JUMP TABLE PORTION OF HBIOS PROXY INTERFACE AREA
#define HB_INVOKE		HBX_XFCFNS + (0 * 3)	// INVOKE HBIOS FUNCTION
#define HB_BNKSEL		HBX_XFCFNS + (1 * 3)	// SELECT LOW MEMORY BANK ID
#define HB_BNKCPY		HBX_XFCFNS + (2 * 3)	// INTERBANK MEMORY COPY
#define HB_BNKCALL		HBX_XFCFNS + (3 * 3)	// INTERBANK FUNCTION CALL
//HB_LOC			HBX_XFCFNS + 12		// ADDRESS OF HBIOS PROXY START (DEPRECATED)
#define HB_IDENT		HBX_XFCFNS + 14		// POINTER TO HBIOS IDENT DATA BLOCK
